{
	"registryContainerPort": 8500,
	"registryContainerHost": "psdeoffws0077.parship.internal",
	"registryContainerProtocol" : "http",
	
	//if true the server will log all exceptions including expected exception (defined by the interface), otherwise expected exceptions will be ignored
	"logServerSideExceptions": false,
	//if true the client (stub) will log all caught exceptions (remote exception and runtime exceptions)
	"logClientSideExceptions": false,
	//Could not be changed at runtime, because that makes no sense
	"registryConnectorClazz": "org.distributeme.consulintegration.ConsulRegistryConnector" ,
	
	//registrationIpMapping: "192.168.200.5:10.0.0.0",
	
	"listener.1": "org.distributeme.core.listener.ServerLifecycleSysOutPrinterListener",
    "listener.2": "org.distributeme.core.listener.UDPReregistrationListener",
	"interceptor.1": "org.distributeme.core.interceptor.availabilitytesting.ServiceUnavailableByPropertyInterceptor",
	"interceptor.2": "org.distributeme.core.interceptor.availabilitytesting.ServerSideSlowDownByPropertyInterceptor",
	"interceptor.3": "org.distributeme.core.interceptor.availabilitytesting.ServerSideSlowDownByConfigurationInterceptor",
//	"interceptor.4": "org.distributeme.test.roundrobinwithfotonext.interceptor.ClientSideMarkLongRequestAsFailedInterceptor",
    //"interceptor.4": "org.distributeme.test.list.ListInterceptor",
//    "interceptor.20": "org.distributeme.test.roundrobinwithfotonext.interceptor.ClientSideMarkLongRequestAsFailedInterceptor",
//    "interceptor.5": "org.distributeme.core.qos.QOSMonitoringInterceptor",
	
	"test": {
		"interceptors": {
//			"interceptor.1": "org.distributeme.test.interception.interceptor.LogOutBeforeCallInterceptor", 
			"interceptor.2": "org.distributeme.test.interception.interceptor.InterceptSumInterceptor", 
			"interceptor.3": "org.distributeme.test.interception.interceptor.ModifyReturnValueInterceptor",
			"interceptor.4": "org.distributeme.test.interception.interceptor.InterceptInClientInterceptor",
			"interceptor.5": "org.distributeme.test.interception.interceptor.InspectParameterExample",
			"interceptor.6": "org.distributeme.test.interception.interceptor.PiggybackingInterceptor",
			"interceptor.10": "org.distributeme.core.interceptor.moskito.MoskitoJourneyInterceptor",
//			"interceptor.50": "org.distributeme.test.interception.interceptor.LogOutAfterCallInterceptor",
		},
		
		"flip": {
			"interceptor.1": "org.distributeme.core.interceptor.availabilitytesting.FlippingServiceUnavailableByConfigurationInterceptor", 
			"interceptor.2": "org.distributeme.core.interceptor.availabilitytesting.FlippingServerSideSlowDownByConfigurationInterceptor",
			"interceptor.3": "org.distributeme.core.interceptor.availabilitytesting.FlippingServerSideSlowDownByConfigurationInterceptor", 
		},
	},
	"registrynamingtest": {
		"yada": {
			"registryContainerContext": "yada"
		},
		"ROOT": {
			"registryContainerContext": ""
		}
	}
}  